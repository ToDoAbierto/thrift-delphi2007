(**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *)

unit Thrift_Test1;

interface

//{$I uDefine.inc}
{$ifdef CompilerVersion}
{$IF CompilerVersion >= 21}
{$DEFINE CompilerVersion_g21}
{$ELSE}
{$DEFINE CompilerVersion_l21}  
{$IFEND}
{$IF CompilerVersion >= 19} // From Tiburon / Delphi 2009 has support generic collection
{$DEFINE GEN_SUPPORT}
{$DEFINE YES_SCOPEDENUMS}
{$ELSE}
{$DEFINE GEN_NOSUPPORT} //No support Generic
{$DEFINE NO_TStringBuilder}//No Support TStringBuilder
{$DEFINE NO_SCOPEDENUMS}//No Support TStringBuilder
{$IFEND}
{$else}
{$DEFINE GEN_NOSUPPORT}
{$DEFINE NO_TStringBuilder}
{$DEFINE NO_SCOPEDENUMS}
{$DEFINE CompilerVersion_l21}  
{$endif}

uses
  Classes,
  SysUtils,
  uCollections,
  uTypes,
  Thrift,
  Thrift.Utils,
  Thrift.Protocol,
  Thrift.Transport;

const
  cThrift_Test1_Option_AnsiStr_Binary = False;
type

//{$SCOPEDENUMS ON}

  TOperation = (
    ADD = 1,
    SUBTRACT = 2,
    MULTIPLY = 3,
    DIVIDE = 4
  );

//{$SCOPEDENUMS OFF}

  TMyInteger = Integer;

  IWork = interface(IBase)
    function GetNum1: Integer;
    procedure SetNum1( const Value: Integer);
    function GetNum2: Integer;
    procedure SetNum2( const Value: Integer);
    function GetOp: TOperation;
    procedure SetOp( const Value: TOperation);
    function GetComment: string;
    procedure SetComment( const Value: string);

    property Num1: Integer read GetNum1 write SetNum1;
    property Num2: Integer read GetNum2 write SetNum2;
    property Op: TOperation read GetOp write SetOp;
    property Comment: string read GetComment write SetComment;

    function Get__isset_Num1: Boolean;
    function Get__isset_Num2: Boolean;
    function Get__isset_Op: Boolean;
    function Get__isset_Comment: Boolean;

    property __isset_Num1: Boolean read Get__isset_Num1;
    property __isset_Num2: Boolean read Get__isset_Num2;
    property __isset_Op: Boolean read Get__isset_Op;
    property __isset_Comment: Boolean read Get__isset_Comment;
  end;

  TWorkImpl = class(TInterfacedObject, IBase, IWork)
  private
    FNum1: Integer;
    FNum2: Integer;
    FOp: TOperation;
    FComment: string;
    
    F__isset_Num1: Boolean;
    F__isset_Num2: Boolean;
    F__isset_Op: Boolean;
    F__isset_Comment: Boolean;
    
    function GetNum1: Integer;
    procedure SetNum1( const Value: Integer);
    function GetNum2: Integer;
    procedure SetNum2( const Value: Integer);
    function GetOp: TOperation;
    procedure SetOp( const Value: TOperation);
    function GetComment: string;
    procedure SetComment( const Value: string);

    function Get__isset_Num1: Boolean;
    function Get__isset_Num2: Boolean;
    function Get__isset_Op: Boolean;
    function Get__isset_Comment: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; {override}

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property Num1: Integer read GetNum1 write SetNum1;
    property Num2: Integer read GetNum2 write SetNum2;
    property Op: TOperation read GetOp write SetOp;
    property Comment: string read GetComment write SetComment;

    // isset
    property __isset_Num1: Boolean read Get__isset_Num1;
    property __isset_Num2: Boolean read Get__isset_Num2;
    property __isset_Op: Boolean read Get__isset_Op;
    property __isset_Comment: Boolean read Get__isset_Comment;
  end;

  TInvalidOperation = class(TException)
  public
    type
      IInvalidOperationFactory = interface(IBase)
        function GetWhat: Integer;
        procedure SetWhat( const Value: Integer);
        function GetWhy: string;
        procedure SetWhy( const Value: string);

        // Create Exception Object
        function CreateException: TInvalidOperation;

        property What: Integer read GetWhat write SetWhat;
        property Why: string read GetWhy write SetWhy;

        function Get__isset_What: Boolean;
        function Get__isset_Why: Boolean;

        property __isset_What: Boolean read Get__isset_What;
        property __isset_Why: Boolean read Get__isset_Why;
      end;

      TInvalidOperationFactoryImpl = class(TInterfacedObject, IBase, IInvalidOperationFactory)
      private
        FWhat: Integer;
        FWhy: string;
        
        F__isset_What: Boolean;
        F__isset_Why: Boolean;
        
        function GetWhat: Integer;
        procedure SetWhat( const Value: Integer);
        function GetWhy: string;
        procedure SetWhy( const Value: string);

        function Get__isset_What: Boolean;
        function Get__isset_Why: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; {override}

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Create Exception Object
        function CreateException: TInvalidOperation;

        // Properties
        property What: Integer read GetWhat write SetWhat;
        property Why: string read GetWhy write SetWhy;

        // isset
        property __isset_What: Boolean read Get__isset_What;
        property __isset_Why: Boolean read Get__isset_Why;
      end;

  private
    FInvalidOperationFactory :IInvalidOperationFactory;

    FWhat: Integer;
    FWhy: string;
    
    F__isset_What: Boolean;
    F__isset_Why: Boolean;
    
    function GetWhat: Integer;
    procedure SetWhat( const Value: Integer);
    function GetWhy: string;
    procedure SetWhy( const Value: string);

    function Get__isset_What: Boolean;
    function Get__isset_Why: Boolean;
  public
    constructor Create; overload;
    constructor Create( AWhat: Integer; const AWhy: string); overload;
    destructor Destroy; override;

    function ToString: string; {override}

    // Exception Factory
    property InvalidOperationFactory: IInvalidOperationFactory read FInvalidOperationFactory write FInvalidOperationFactory;

    // Properties
    property What: Integer read GetWhat write SetWhat;
    property Why: string read GetWhy write SetWhy;

    // isset
    property __isset_What: Boolean read Get__isset_What;
    property __isset_Why: Boolean read Get__isset_Why;
  end;

  TTrialTest = class
  public
    type
      Iface = interface
        procedure ping();
        function add(num1: Integer; num2: Integer): Integer;
        function sub(num1: Integer; num2: Integer): Integer;
        function calculate(logid: Integer; const w: IWork): Integer;
        procedure zip();
      end;

      TClient = class( TInterfacedObject, Iface)
      public
        constructor Create( prot: IProtocol); overload;
        constructor Create( const iprot: IProtocol; const oprot: IProtocol); overload;
      protected
        iprot_: IProtocol;
        oprot_: IProtocol;
        seqid_: Integer;
      public
        property InputProtocol: IProtocol read iprot_;
        property OutputProtocol: IProtocol read oprot_;
      protected
        // Iface
        procedure ping();
        function add(num1: Integer; num2: Integer): Integer;
        function sub(num1: Integer; num2: Integer): Integer;
        function calculate(logid: Integer; const w: IWork): Integer;
        procedure zip();
      public
        procedure send_ping();
        procedure recv_ping();
        procedure send_add(num1: Integer; num2: Integer);
        function recv_add(): Integer;
        procedure send_sub(num1: Integer; num2: Integer);
        function recv_sub(): Integer;
        procedure send_calculate(logid: Integer; const w: IWork);
        function recv_calculate(): Integer;
        procedure send_zip();
      end;

      TProcessorImpl = class( TInterfacedObject, IProcessor)
      public
        constructor Create( iface_: Iface );
        destructor Destroy; override;
      private
        iface_: Iface;
      protected
        type
          TProcessFunction = {reference to }procedure( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
      protected
        processMap_: IThriftDictionary_V_V;{IThriftDictionary<string, TProcessFunction>;}
      public
        function Process( const iprot: IProtocol; const oprot: IProtocol): Boolean;
        procedure ping_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
        procedure add_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
        procedure sub_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
        procedure calculate_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
        procedure zip_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
      end;

      IPing_args = interface(IBase)
      end;

      TPing_argsImpl = class(TInterfacedObject, IBase, IPing_args)
      private
        
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; {override}

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);
      end;

      IPing_result = interface(IBase)
      end;

      TPing_resultImpl = class(TInterfacedObject, IBase, IPing_result)
      private
        
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; {override}

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);
      end;

      IAdd_args = interface(IBase)
        function GetNum1: Integer;
        procedure SetNum1( const Value: Integer);
        function GetNum2: Integer;
        procedure SetNum2( const Value: Integer);

        property Num1: Integer read GetNum1 write SetNum1;
        property Num2: Integer read GetNum2 write SetNum2;

        function Get__isset_Num1: Boolean;
        function Get__isset_Num2: Boolean;

        property __isset_Num1: Boolean read Get__isset_Num1;
        property __isset_Num2: Boolean read Get__isset_Num2;
      end;

      TAdd_argsImpl = class(TInterfacedObject, IBase, IAdd_args)
      private
        FNum1: Integer;
        FNum2: Integer;
        
        F__isset_Num1: Boolean;
        F__isset_Num2: Boolean;
        
        function GetNum1: Integer;
        procedure SetNum1( const Value: Integer);
        function GetNum2: Integer;
        procedure SetNum2( const Value: Integer);

        function Get__isset_Num1: Boolean;
        function Get__isset_Num2: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; {override}

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Num1: Integer read GetNum1 write SetNum1;
        property Num2: Integer read GetNum2 write SetNum2;

        // isset
        property __isset_Num1: Boolean read Get__isset_Num1;
        property __isset_Num2: Boolean read Get__isset_Num2;
      end;

      IAdd_result = interface(IBase)
        function GetSuccess: Integer;
        procedure SetSuccess( const Value: Integer);

        property Success: Integer read GetSuccess write SetSuccess;

        function Get__isset_Success: Boolean;

        property __isset_Success: Boolean read Get__isset_Success;
      end;

      TAdd_resultImpl = class(TInterfacedObject, IBase, IAdd_result)
      private
        FSuccess: Integer;
        
        F__isset_Success: Boolean;
        
        function GetSuccess: Integer;
        procedure SetSuccess( const Value: Integer);

        function Get__isset_Success: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; {override}

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Success: Integer read GetSuccess write SetSuccess;

        // isset
        property __isset_Success: Boolean read Get__isset_Success;
      end;

      ISub_args = interface(IBase)
        function GetNum1: Integer;
        procedure SetNum1( const Value: Integer);
        function GetNum2: Integer;
        procedure SetNum2( const Value: Integer);

        property Num1: Integer read GetNum1 write SetNum1;
        property Num2: Integer read GetNum2 write SetNum2;

        function Get__isset_Num1: Boolean;
        function Get__isset_Num2: Boolean;

        property __isset_Num1: Boolean read Get__isset_Num1;
        property __isset_Num2: Boolean read Get__isset_Num2;
      end;

      TSub_argsImpl = class(TInterfacedObject, IBase, ISub_args)
      private
        FNum1: Integer;
        FNum2: Integer;
        
        F__isset_Num1: Boolean;
        F__isset_Num2: Boolean;
        
        function GetNum1: Integer;
        procedure SetNum1( const Value: Integer);
        function GetNum2: Integer;
        procedure SetNum2( const Value: Integer);

        function Get__isset_Num1: Boolean;
        function Get__isset_Num2: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; {override}

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Num1: Integer read GetNum1 write SetNum1;
        property Num2: Integer read GetNum2 write SetNum2;

        // isset
        property __isset_Num1: Boolean read Get__isset_Num1;
        property __isset_Num2: Boolean read Get__isset_Num2;
      end;

      ISub_result = interface(IBase)
        function GetSuccess: Integer;
        procedure SetSuccess( const Value: Integer);

        property Success: Integer read GetSuccess write SetSuccess;

        function Get__isset_Success: Boolean;

        property __isset_Success: Boolean read Get__isset_Success;
      end;

      TSub_resultImpl = class(TInterfacedObject, IBase, ISub_result)
      private
        FSuccess: Integer;
        
        F__isset_Success: Boolean;
        
        function GetSuccess: Integer;
        procedure SetSuccess( const Value: Integer);

        function Get__isset_Success: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; {override}

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Success: Integer read GetSuccess write SetSuccess;

        // isset
        property __isset_Success: Boolean read Get__isset_Success;
      end;

      ICalculate_args = interface(IBase)
        function GetLogid: Integer;
        procedure SetLogid( const Value: Integer);
        function GetW: IWork;
        procedure SetW( const Value: IWork);

        property Logid: Integer read GetLogid write SetLogid;
        property W: IWork read GetW write SetW;

        function Get__isset_Logid: Boolean;
        function Get__isset_W: Boolean;

        property __isset_Logid: Boolean read Get__isset_Logid;
        property __isset_W: Boolean read Get__isset_W;
      end;

      TCalculate_argsImpl = class(TInterfacedObject, IBase, ICalculate_args)
      private
        FLogid: Integer;
        FW: IWork;
        
        F__isset_Logid: Boolean;
        F__isset_W: Boolean;
        
        function GetLogid: Integer;
        procedure SetLogid( const Value: Integer);
        function GetW: IWork;
        procedure SetW( const Value: IWork);

        function Get__isset_Logid: Boolean;
        function Get__isset_W: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; {override}

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Logid: Integer read GetLogid write SetLogid;
        property W: IWork read GetW write SetW;

        // isset
        property __isset_Logid: Boolean read Get__isset_Logid;
        property __isset_W: Boolean read Get__isset_W;
      end;

      ICalculate_result = interface(IBase)
        function GetSuccess: Integer;
        procedure SetSuccess( const Value: Integer);
        function GetOuch: TInvalidOperation.IInvalidOperationFactory;
        procedure SetOuch( const Value: TInvalidOperation.IInvalidOperationFactory);

        property Success: Integer read GetSuccess write SetSuccess;
        property Ouch: TInvalidOperation.IInvalidOperationFactory read GetOuch write SetOuch;

        function Get__isset_Success: Boolean;
        function Get__isset_Ouch: Boolean;

        property __isset_Success: Boolean read Get__isset_Success;
        property __isset_Ouch: Boolean read Get__isset_Ouch;
      end;

      TCalculate_resultImpl = class(TInterfacedObject, IBase, ICalculate_result)
      private
        FSuccess: Integer;
        FOuch: TInvalidOperation.IInvalidOperationFactory;
        
        F__isset_Success: Boolean;
        F__isset_Ouch: Boolean;
        
        function GetSuccess: Integer;
        procedure SetSuccess( const Value: Integer);
        function GetOuch: TInvalidOperation.IInvalidOperationFactory;
        procedure SetOuch( const Value: TInvalidOperation.IInvalidOperationFactory);

        function Get__isset_Success: Boolean;
        function Get__isset_Ouch: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; {override}

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Success: Integer read GetSuccess write SetSuccess;
        property Ouch: TInvalidOperation.IInvalidOperationFactory read GetOuch write SetOuch;

        // isset
        property __isset_Success: Boolean read Get__isset_Success;
        property __isset_Ouch: Boolean read Get__isset_Ouch;
      end;

      IZip_args = interface(IBase)
      end;

      TZip_argsImpl = class(TInterfacedObject, IBase, IZip_args)
      private
        
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; {override}

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);
      end;

  end;
  
  TConstants = class
  private
    class var FINT32CONSTANT: Integer;
    class var FMAPCONSTANT: IThriftDictionary_V_V;
  public
    class property INT32CONSTANT: Integer read FINT32CONSTANT;
    class property MAPCONSTANT: IThriftDictionary_V_V read FMAPCONSTANT;
    //{$IF CompilerVersion >= 21.0}
    {$IFDEF CompilerVersion_g21}
    class constructor Create;
    class destructor Destroy;
    {$ENDIF}
  end;

implementation

constructor TWorkImpl.Create;
begin
  inherited;
  FNum1 := LongInt( 0);
  F__isset_Num1 := True;
end;

destructor TWorkImpl.Destroy;
begin
  inherited;
end;

function TWorkImpl.GetNum1: Integer;
begin
  Result := FNum1;
end;

procedure TWorkImpl.SetNum1( const Value: Integer);
begin
  F__isset_Num1 := True;
  FNum1 := Value;
end;

function TWorkImpl.Get__isset_Num1: Boolean;
begin
  Result := F__isset_Num1;
end;

function TWorkImpl.GetNum2: Integer;
begin
  Result := FNum2;
end;

procedure TWorkImpl.SetNum2( const Value: Integer);
begin
  F__isset_Num2 := True;
  FNum2 := Value;
end;

function TWorkImpl.Get__isset_Num2: Boolean;
begin
  Result := F__isset_Num2;
end;

function TWorkImpl.GetOp: TOperation;
begin
  Result := FOp;
end;

procedure TWorkImpl.SetOp( const Value: TOperation);
begin
  F__isset_Op := True;
  FOp := Value;
end;

function TWorkImpl.Get__isset_Op: Boolean;
begin
  Result := F__isset_Op;
end;

function TWorkImpl.GetComment: string;
begin
  Result := FComment;
end;

procedure TWorkImpl.SetComment( const Value: string);
begin
  F__isset_Comment := True;
  FComment := Value;
end;

function TWorkImpl.Get__isset_Comment: Boolean;
begin
  Result := F__isset_Comment;
end;

procedure TWorkImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Num1 := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Num2 := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Op := TOperation(iprot.ReadI32());
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = {TType.}String_) then
          begin
            Comment := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TWorkImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('Work');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Num1) then
  begin
    field_.Name := 'num1';
    field_.Type_  := {TType.}I32;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Num1);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Num2) then
  begin
    field_.Name := 'num2';
    field_.Type_  := {TType.}I32;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Num2);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Op) then
  begin
    field_.Name := 'op';
    field_.Type_  := {TType.}I32;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Integer(Op));
    oprot.WriteFieldEnd();
  end;
  if (__isset_Comment) then
  begin
    field_.Name := 'comment';
    field_.Type_  := {TType.}String_;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Comment);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TWorkImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('Num1: ');
    sb.Append(Num1);
    sb.Append(',Num2: ');
    sb.Append(Num2);
    sb.Append(',Op: ');
    sb.Append(Integer(Op));
    sb.Append(',Comment: ');
    sb.Append(Comment);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TInvalidOperation.TInvalidOperationFactoryImpl.Create;
begin
  inherited;
end;

destructor TInvalidOperation.TInvalidOperationFactoryImpl.Destroy;
begin
  inherited;
end;

function TInvalidOperation.TInvalidOperationFactoryImpl.GetWhat: Integer;
begin
  Result := FWhat;
end;

procedure TInvalidOperation.TInvalidOperationFactoryImpl.SetWhat( const Value: Integer);
begin
  F__isset_What := True;
  FWhat := Value;
end;

function TInvalidOperation.TInvalidOperationFactoryImpl.Get__isset_What: Boolean;
begin
  Result := F__isset_What;
end;

function TInvalidOperation.TInvalidOperationFactoryImpl.GetWhy: string;
begin
  Result := FWhy;
end;

procedure TInvalidOperation.TInvalidOperationFactoryImpl.SetWhy( const Value: string);
begin
  F__isset_Why := True;
  FWhy := Value;
end;

function TInvalidOperation.TInvalidOperationFactoryImpl.Get__isset_Why: Boolean;
begin
  Result := F__isset_Why;
end;

procedure TInvalidOperation.TInvalidOperationFactoryImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            What := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = {TType.}String_) then
          begin
            Why := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TInvalidOperation.TInvalidOperationFactoryImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('InvalidOperation');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_What) then
  begin
    field_.Name := 'what';
    field_.Type_  := {TType.}I32;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(What);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Why) then
  begin
    field_.Name := 'why';
    field_.Type_  := {TType.}String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Why);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TInvalidOperation.TInvalidOperationFactoryImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('What: ');
    sb.Append(What);
    sb.Append(',Why: ');
    sb.Append(Why);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

function TInvalidOperation.TInvalidOperationFactoryImpl.CreateException: TInvalidOperation;
begin
  Result := TInvalidOperation.Create;
  Result.InvalidOperationFactory := Self;
  if __isset_What then
  begin
    Result.What := What;
  end;
  if __isset_Why then
  begin
    Result.Why := Why;
  end;
  Result.UpdateMessageProperty;
end;

constructor TInvalidOperation.Create;
begin
  inherited Create('');
  FInvalidOperationFactory := TInvalidOperationFactoryImpl.Create;
end;

constructor TInvalidOperation.Create( AWhat: Integer; const AWhy: string);
begin
  Create;
  What := AWhat;
  Why := AWhy;
  UpdateMessageProperty;
end;

destructor TInvalidOperation.Destroy;
begin
  inherited;
end;

function TInvalidOperation.GetWhat: Integer;
begin
  Result := FWhat;
end;

procedure TInvalidOperation.SetWhat( const Value: Integer);
begin
  F__isset_What := True;
  FWhat := Value;
  FInvalidOperationFactory.What := Value;
end;

function TInvalidOperation.Get__isset_What: Boolean;
begin
  Result := F__isset_What;
end;

function TInvalidOperation.GetWhy: string;
begin
  Result := FWhy;
end;

procedure TInvalidOperation.SetWhy( const Value: string);
begin
  F__isset_Why := True;
  FWhy := Value;
  FInvalidOperationFactory.Why := Value;
end;

function TInvalidOperation.Get__isset_Why: Boolean;
begin
  Result := F__isset_Why;
end;

function TInvalidOperation.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('What: ');
    sb.Append(What);
    sb.Append(',Why: ');
    sb.Append(Why);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TTrialTest.TClient.Create( prot: IProtocol);
begin
  Create( prot, prot );
end;

constructor TTrialTest.TClient.Create( const iprot: IProtocol; const oprot: IProtocol);
begin
  iprot_ := iprot;
  oprot_ := oprot;
end;

procedure TTrialTest.TClient.ping();
begin
  send_ping();
  recv_ping();
end;

procedure TTrialTest.TClient.send_ping();
var
  args : IPing_args;
  msg : IMessage;
begin
  seqid_ := seqid_ + 1;
  msg := TMessageImpl.Create('ping', {TMessageType.}Call, seqid_);
  oprot_.WriteMessageBegin( msg );
  args := TPing_argsImpl.Create();
  args.Write(oprot_);
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

procedure TTrialTest.TClient.recv_ping();
var
  msg : IMessage;
  x : TApplicationException;
  ret : IPing_result;
begin
  msg := iprot_.ReadMessageBegin();
  if (msg.Type_ = {TMessageType.}Exception) then
  begin
    x := TApplicationException.Read(iprot_);
    iprot_.ReadMessageEnd();
    raise x;
  end;
  ret := TPing_resultImpl.Create();
  ret.Read(iprot_);
  iprot_.ReadMessageEnd();
end;

function TTrialTest.TClient.add(num1: Integer; num2: Integer): Integer;
begin
  send_add(num1, num2);
  Result := recv_add();
end;

procedure TTrialTest.TClient.send_add(num1: Integer; num2: Integer);
var
  args : IAdd_args;
  msg : IMessage;
begin
  seqid_ := seqid_ + 1;
  msg := TMessageImpl.Create('add', {TMessageType.}Call, seqid_);
  oprot_.WriteMessageBegin( msg );
  args := TAdd_argsImpl.Create();
  args.Num1 := num1;
  args.Num2 := num2;
  args.Write(oprot_);
  args.Num1 := 0;
  args.Num2 := 0;
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

function TTrialTest.TClient.recv_add(): Integer;
var
  msg : IMessage;
  x : TApplicationException;
  ret : IAdd_result;
begin
  msg := iprot_.ReadMessageBegin();
  if (msg.Type_ = {TMessageType.}Exception) then
  begin
    x := TApplicationException.Read(iprot_);
    iprot_.ReadMessageEnd();
    raise x;
  end;
  ret := TAdd_resultImpl.Create();
  ret.Read(iprot_);
  iprot_.ReadMessageEnd();
  if (ret.__isset_success) then
  begin
    Result := ret.Success;
    Exit;
  end;
  raise TApplicationException.Create({TApplicationException.TExceptionType.}MissingResult, 'add failed: unknown result');
end;

function TTrialTest.TClient.sub(num1: Integer; num2: Integer): Integer;
begin
  send_sub(num1, num2);
  Result := recv_sub();
end;

procedure TTrialTest.TClient.send_sub(num1: Integer; num2: Integer);
var
  args : ISub_args;
  msg : IMessage;
begin
  seqid_ := seqid_ + 1;
  msg := TMessageImpl.Create('sub', {TMessageType.}Call, seqid_);
  oprot_.WriteMessageBegin( msg );
  args := TSub_argsImpl.Create();
  args.Num1 := num1;
  args.Num2 := num2;
  args.Write(oprot_);
  args.Num1 := 0;
  args.Num2 := 0;
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

function TTrialTest.TClient.recv_sub(): Integer;
var
  msg : IMessage;
  x : TApplicationException;
  ret : ISub_result;
begin
  msg := iprot_.ReadMessageBegin();
  if (msg.Type_ = {TMessageType.}Exception) then
  begin
    x := TApplicationException.Read(iprot_);
    iprot_.ReadMessageEnd();
    raise x;
  end;
  ret := TSub_resultImpl.Create();
  ret.Read(iprot_);
  iprot_.ReadMessageEnd();
  if (ret.__isset_success) then
  begin
    Result := ret.Success;
    Exit;
  end;
  raise TApplicationException.Create({TApplicationException.TExceptionType.}MissingResult, 'sub failed: unknown result');
end;

function TTrialTest.TClient.calculate(logid: Integer; const w: IWork): Integer;
begin
  send_calculate(logid, w);
  Result := recv_calculate();
end;

procedure TTrialTest.TClient.send_calculate(logid: Integer; const w: IWork);
var
  args : ICalculate_args;
  msg : IMessage;
begin
  seqid_ := seqid_ + 1;
  msg := TMessageImpl.Create('calculate', {TMessageType.}Call, seqid_);
  oprot_.WriteMessageBegin( msg );
  args := TCalculate_argsImpl.Create();
  args.Logid := logid;
  args.W := w;
  args.Write(oprot_);
  args.Logid := 0;
  args.W := nil;
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

function TTrialTest.TClient.recv_calculate(): Integer;
var
  msg : IMessage;
  ex : Sysutils.Exception;
  x : TApplicationException;
  ret : ICalculate_result;
begin
  msg := iprot_.ReadMessageBegin();
  if (msg.Type_ = {TMessageType.}Exception) then
  begin
    x := TApplicationException.Read(iprot_);
    iprot_.ReadMessageEnd();
    raise x;
  end;
  ret := TCalculate_resultImpl.Create();
  ret.Read(iprot_);
  iprot_.ReadMessageEnd();
  if (ret.__isset_success) then
  begin
    Result := ret.Success;
    Exit;
  end;
  if (ret.__isset_Ouch) then
  begin
    ex := ret.Ouch.CreateException;
    raise ex;
  end;
  raise TApplicationException.Create({TApplicationException.TExceptionType.}MissingResult, 'calculate failed: unknown result');
end;

procedure TTrialTest.TClient.zip();
begin
  send_zip();
end;

procedure TTrialTest.TClient.send_zip();
var
  args : IZip_args;
  msg : IMessage;
begin
  seqid_ := seqid_ + 1;
  msg := TMessageImpl.Create('zip', {TMessageType.}Call, seqid_);
  oprot_.WriteMessageBegin( msg );
  args := TZip_argsImpl.Create();
  args.Write(oprot_);
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

constructor TTrialTest.TProcessorImpl.Create( iface_: Iface );
begin
  inherited Create;
  Self.iface_ := iface_;
  processMap_ := TThriftDictionary_V_VImpl{<string, TProcessFunction>}.Create;
  //processMap_.AddOrSetValue( 'ping', ping_Process);
  processMap_.AddOrSetValue( 'ping',TValueVariant.Create(Pointer(self.MethodAddress('ping_Process'))));
  //processMap_.AddOrSetValue( 'add', add_Process);
  processMap_.AddOrSetValue( 'add',TValueVariant.Create(Pointer(self.MethodAddress('add_Process'))));
  //processMap_.AddOrSetValue( 'sub', sub_Process);
  processMap_.AddOrSetValue( 'sub',TValueVariant.Create(Pointer(self.MethodAddress('sub_Process'))));
  //processMap_.AddOrSetValue( 'calculate', calculate_Process);
  processMap_.AddOrSetValue( 'calculate',TValueVariant.Create(Pointer(self.MethodAddress('calculate_Process'))));
  //processMap_.AddOrSetValue( 'zip', zip_Process);
  processMap_.AddOrSetValue( 'zip',TValueVariant.Create(Pointer(self.MethodAddress('zip_Process'))));
end;

destructor TTrialTest.TProcessorImpl.Destroy;
begin
  inherited;
end;

function TTrialTest.TProcessorImpl.Process( const iprot: IProtocol; const oprot: IProtocol): Boolean;
var
  msg : IMessage;
  fn : TProcessFunction;
  fnp : Pointer;
  x : TApplicationException;
begin
  try
    msg := iprot.ReadMessageBegin();
    fn := nil;
    if (not processMap_.TryGetValuePointer(msg.Name, fnp))
    or (fnp=nil) then
    begin
      TProtocolUtil.Skip(iprot, {TType.}Struct);
      iprot.ReadMessageEnd();
      x := TApplicationException.Create({TApplicationException.TExceptionType.}UnknownMethod, 'Invalid method name: ''' + msg.Name + '''');
      msg := TMessageImpl.Create(msg.Name, {TMessageType.}Exception, msg.SeqID);
      oprot.WriteMessageBegin( msg);
      x.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
      Result := True;
      Exit;
    end;
    fn:=TProcessFunction(fnp);
    fn(msg.SeqID, iprot, oprot);
  except
    Result := False;
    Exit;
  end;
  Result := True;
end;

// both way processor
procedure TTrialTest.TProcessorImpl.ping_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: IPing_args;
  msg: IMessage;
  ret: IPing_result;
begin
  args := TPing_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  ret := TPing_resultImpl.Create;
  iface_.ping();
  msg := TMessageImpl.Create('ping', {TMessageType.}Reply, seqid); 
  oprot.WriteMessageBegin( msg); 
  ret.Write(oprot);
  oprot.WriteMessageEnd();
  oprot.Transport.Flush();
end;

// both way processor
procedure TTrialTest.TProcessorImpl.add_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: IAdd_args;
  msg: IMessage;
  ret: IAdd_result;
begin
  args := TAdd_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  ret := TAdd_resultImpl.Create;
  ret.Success := iface_.add(args.Num1, args.Num2);
  args.Num1 := 0;
  args.Num2 := 0;
  msg := TMessageImpl.Create('add', {TMessageType.}Reply, seqid); 
  oprot.WriteMessageBegin( msg); 
  ret.Write(oprot);
  oprot.WriteMessageEnd();
  oprot.Transport.Flush();
end;

// both way processor
procedure TTrialTest.TProcessorImpl.sub_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: ISub_args;
  msg: IMessage;
  ret: ISub_result;
begin
  args := TSub_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  ret := TSub_resultImpl.Create;
  ret.Success := iface_.sub(args.Num1, args.Num2);
  args.Num1 := 0;
  args.Num2 := 0;
  msg := TMessageImpl.Create('sub', {TMessageType.}Reply, seqid); 
  oprot.WriteMessageBegin( msg); 
  ret.Write(oprot);
  oprot.WriteMessageEnd();
  oprot.Transport.Flush();
end;

// both way processor
procedure TTrialTest.TProcessorImpl.calculate_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: ICalculate_args;
  msg: IMessage;
  ret: ICalculate_result;
begin
  args := TCalculate_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  ret := TCalculate_resultImpl.Create;
  try
    ret.Success := iface_.calculate(args.Logid, args.W);
    args.Logid := 0;
    args.W := nil;
  except
    on E: TInvalidOperation do
    begin
      ret.Ouch := E.InvalidOperationFactory;
    end;
  end;
  msg := TMessageImpl.Create('calculate', {TMessageType.}Reply, seqid); 
  oprot.WriteMessageBegin( msg); 
  ret.Write(oprot);
  oprot.WriteMessageEnd();
  oprot.Transport.Flush();
end;

// one way processor
procedure TTrialTest.TProcessorImpl.zip_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: IZip_args;
begin
  args := TZip_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  iface_.zip();
end;

constructor TTrialTest.TPing_argsImpl.Create;
begin
  inherited;
end;

destructor TTrialTest.TPing_argsImpl.Destroy;
begin
  inherited;
end;

procedure TTrialTest.TPing_argsImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      TProtocolUtil.Skip(iprot, field_.Type_);
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTrialTest.TPing_argsImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
begin
  struc := TStructImpl.Create('ping_args');
  oprot.WriteStructBegin(struc);
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTrialTest.TPing_argsImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TTrialTest.TPing_resultImpl.Create;
begin
  inherited;
end;

destructor TTrialTest.TPing_resultImpl.Destroy;
begin
  inherited;
end;

procedure TTrialTest.TPing_resultImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      TProtocolUtil.Skip(iprot, field_.Type_);
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTrialTest.TPing_resultImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
begin
  struc := TStructImpl.Create('ping_result');
  oprot.WriteStructBegin(struc);
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTrialTest.TPing_resultImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TTrialTest.TAdd_argsImpl.Create;
begin
  inherited;
end;

destructor TTrialTest.TAdd_argsImpl.Destroy;
begin
  inherited;
end;

function TTrialTest.TAdd_argsImpl.GetNum1: Integer;
begin
  Result := FNum1;
end;

procedure TTrialTest.TAdd_argsImpl.SetNum1( const Value: Integer);
begin
  F__isset_Num1 := True;
  FNum1 := Value;
end;

function TTrialTest.TAdd_argsImpl.Get__isset_Num1: Boolean;
begin
  Result := F__isset_Num1;
end;

function TTrialTest.TAdd_argsImpl.GetNum2: Integer;
begin
  Result := FNum2;
end;

procedure TTrialTest.TAdd_argsImpl.SetNum2( const Value: Integer);
begin
  F__isset_Num2 := True;
  FNum2 := Value;
end;

function TTrialTest.TAdd_argsImpl.Get__isset_Num2: Boolean;
begin
  Result := F__isset_Num2;
end;

procedure TTrialTest.TAdd_argsImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Num1 := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Num2 := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTrialTest.TAdd_argsImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('add_args');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Num1) then
  begin
    field_.Name := 'num1';
    field_.Type_  := {TType.}I32;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Num1);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Num2) then
  begin
    field_.Name := 'num2';
    field_.Type_  := {TType.}I32;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Num2);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTrialTest.TAdd_argsImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('Num1: ');
    sb.Append(Num1);
    sb.Append(',Num2: ');
    sb.Append(Num2);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TTrialTest.TAdd_resultImpl.Create;
begin
  inherited;
end;

destructor TTrialTest.TAdd_resultImpl.Destroy;
begin
  inherited;
end;

function TTrialTest.TAdd_resultImpl.GetSuccess: Integer;
begin
  Result := FSuccess;
end;

procedure TTrialTest.TAdd_resultImpl.SetSuccess( const Value: Integer);
begin
  F__isset_Success := True;
  FSuccess := Value;
end;

function TTrialTest.TAdd_resultImpl.Get__isset_Success: Boolean;
begin
  Result := F__isset_Success;
end;

procedure TTrialTest.TAdd_resultImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      case field_.ID of
        0: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Success := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTrialTest.TAdd_resultImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('add_result');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Success) then
  begin
    field_.Name := 'Success';
    field_.Type_  := {TType.}I32;
    field_.ID := 0;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Success);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTrialTest.TAdd_resultImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('Success: ');
    sb.Append(Success);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TTrialTest.TSub_argsImpl.Create;
begin
  inherited;
end;

destructor TTrialTest.TSub_argsImpl.Destroy;
begin
  inherited;
end;

function TTrialTest.TSub_argsImpl.GetNum1: Integer;
begin
  Result := FNum1;
end;

procedure TTrialTest.TSub_argsImpl.SetNum1( const Value: Integer);
begin
  F__isset_Num1 := True;
  FNum1 := Value;
end;

function TTrialTest.TSub_argsImpl.Get__isset_Num1: Boolean;
begin
  Result := F__isset_Num1;
end;

function TTrialTest.TSub_argsImpl.GetNum2: Integer;
begin
  Result := FNum2;
end;

procedure TTrialTest.TSub_argsImpl.SetNum2( const Value: Integer);
begin
  F__isset_Num2 := True;
  FNum2 := Value;
end;

function TTrialTest.TSub_argsImpl.Get__isset_Num2: Boolean;
begin
  Result := F__isset_Num2;
end;

procedure TTrialTest.TSub_argsImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Num1 := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Num2 := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTrialTest.TSub_argsImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('sub_args');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Num1) then
  begin
    field_.Name := 'num1';
    field_.Type_  := {TType.}I32;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Num1);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Num2) then
  begin
    field_.Name := 'num2';
    field_.Type_  := {TType.}I32;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Num2);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTrialTest.TSub_argsImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('Num1: ');
    sb.Append(Num1);
    sb.Append(',Num2: ');
    sb.Append(Num2);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TTrialTest.TSub_resultImpl.Create;
begin
  inherited;
end;

destructor TTrialTest.TSub_resultImpl.Destroy;
begin
  inherited;
end;

function TTrialTest.TSub_resultImpl.GetSuccess: Integer;
begin
  Result := FSuccess;
end;

procedure TTrialTest.TSub_resultImpl.SetSuccess( const Value: Integer);
begin
  F__isset_Success := True;
  FSuccess := Value;
end;

function TTrialTest.TSub_resultImpl.Get__isset_Success: Boolean;
begin
  Result := F__isset_Success;
end;

procedure TTrialTest.TSub_resultImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      case field_.ID of
        0: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Success := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTrialTest.TSub_resultImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('sub_result');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Success) then
  begin
    field_.Name := 'Success';
    field_.Type_  := {TType.}I32;
    field_.ID := 0;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Success);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTrialTest.TSub_resultImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('Success: ');
    sb.Append(Success);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TTrialTest.TCalculate_argsImpl.Create;
begin
  inherited;
end;

destructor TTrialTest.TCalculate_argsImpl.Destroy;
begin
  inherited;
end;

function TTrialTest.TCalculate_argsImpl.GetLogid: Integer;
begin
  Result := FLogid;
end;

procedure TTrialTest.TCalculate_argsImpl.SetLogid( const Value: Integer);
begin
  F__isset_Logid := True;
  FLogid := Value;
end;

function TTrialTest.TCalculate_argsImpl.Get__isset_Logid: Boolean;
begin
  Result := F__isset_Logid;
end;

function TTrialTest.TCalculate_argsImpl.GetW: IWork;
begin
  Result := FW;
end;

procedure TTrialTest.TCalculate_argsImpl.SetW( const Value: IWork);
begin
  F__isset_W := True;
  FW := Value;
end;

function TTrialTest.TCalculate_argsImpl.Get__isset_W: Boolean;
begin
  Result := F__isset_W;
end;

procedure TTrialTest.TCalculate_argsImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Logid := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = {TType.}Struct) then
          begin
            W := TWorkImpl.Create;
            W.Read(iprot);
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTrialTest.TCalculate_argsImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('calculate_args');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Logid) then
  begin
    field_.Name := 'logid';
    field_.Type_  := {TType.}I32;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Logid);
    oprot.WriteFieldEnd();
  end;
  if (W <> nil) and __isset_W then
  begin
    field_.Name := 'w';
    field_.Type_  := {TType.}Struct;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    W.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTrialTest.TCalculate_argsImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('Logid: ');
    sb.Append(Logid);
    sb.Append(',W: ');
    if (W = nil) then sb.Append('<null>') else sb.Append(W.ToString());
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TTrialTest.TCalculate_resultImpl.Create;
begin
  inherited;
end;

destructor TTrialTest.TCalculate_resultImpl.Destroy;
begin
  inherited;
end;

function TTrialTest.TCalculate_resultImpl.GetSuccess: Integer;
begin
  Result := FSuccess;
end;

procedure TTrialTest.TCalculate_resultImpl.SetSuccess( const Value: Integer);
begin
  F__isset_Success := True;
  FSuccess := Value;
end;

function TTrialTest.TCalculate_resultImpl.Get__isset_Success: Boolean;
begin
  Result := F__isset_Success;
end;

function TTrialTest.TCalculate_resultImpl.GetOuch: TInvalidOperation.IInvalidOperationFactory;
begin
  Result := FOuch;
end;

procedure TTrialTest.TCalculate_resultImpl.SetOuch( const Value: TInvalidOperation.IInvalidOperationFactory);
begin
  F__isset_Ouch := True;
  FOuch := Value;
end;

function TTrialTest.TCalculate_resultImpl.Get__isset_Ouch: Boolean;
begin
  Result := F__isset_Ouch;
end;

procedure TTrialTest.TCalculate_resultImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      case field_.ID of
        0: begin
          if (field_.Type_ = {TType.}I32) then
          begin
            Success := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        1: begin
          if (field_.Type_ = {TType.}Struct) then
          begin
            Ouch := TInvalidOperation.TInvalidOperationFactoryImpl.Create;
            Ouch.Read(iprot);
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTrialTest.TCalculate_resultImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('calculate_result');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Success) then
  begin
    field_.Name := 'Success';
    field_.Type_  := {TType.}I32;
    field_.ID := 0;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Success);
    oprot.WriteFieldEnd();
  end;
  if (Ouch <> nil) and __isset_Ouch then
  begin
    field_.Name := 'ouch';
    field_.Type_  := {TType.}Struct;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    Ouch.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTrialTest.TCalculate_resultImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('Success: ');
    sb.Append(Success);
    sb.Append(',Ouch: ');
    if (Ouch = nil) then sb.Append('<null>') else sb.Append(Ouch.ToString());
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

constructor TTrialTest.TZip_argsImpl.Create;
begin
  inherited;
end;

destructor TTrialTest.TZip_argsImpl.Destroy;
begin
  inherited;
end;

procedure TTrialTest.TZip_argsImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = {TType.}Stop) then
      begin
        Break;
      end;
      TProtocolUtil.Skip(iprot, field_.Type_);
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTrialTest.TZip_argsImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
begin
  struc := TStructImpl.Create('zip_args');
  oprot.WriteStructBegin(struc);
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTrialTest.TZip_argsImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

//{$IF CompilerVersion >= 21.0}
{$IFDEF CompilerVersion_g21}
class constructor TConstants.Create;
begin
  FINT32CONSTANT := LongInt( 9853);
  FMAPCONSTANT := TThriftDictionary_V_VImpl.Create;
  FMAPCONSTANT['hello'] := 'world';
  FMAPCONSTANT['goodnight'] := 'moon';
end;

class destructor TConstants.Destroy;
begin
  inherited;
end;
{$ELSE}
procedure TConstants_Initialize;
begin
  TConstants.FINT32CONSTANT := LongInt( 9853);
  TConstants.FMAPCONSTANT := TThriftDictionary_V_VImpl.Create;
  TConstants.FMAPCONSTANT['hello'] := 'world';
  TConstants.FMAPCONSTANT['goodnight'] := 'moon';
end;

procedure TConstants_Finalize;
begin
end;
{$ENDIF}

//{$IFEND}


initialization
//{$IF CompilerVersion < 21.0}
{$IFDEF CompilerVersion_l21}
  TConstants_Initialize;
{$ENDIF}
//{$IFEND}

finalization
//{$IF CompilerVersion < 21.0}
{$IFDEF CompilerVersion_l21}
  TConstants_Finalize;
{$ENDIF}
//{$IFEND}


end.
